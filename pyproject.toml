[project]
name = "lambda-project"
version = "0.1.0"
description = "AWS Lambda project with hexagonal architecture"
requires-python = ">=3.13,<4.0"

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
python = "^3.13"
aws-lambda-powertools = "^2.26.0"
boto3 = "^1.36.16"

[tool.poetry.group.dev.dependencies]
mypy = "^1.5.1"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
boto3-stubs = "^1.36.16"
ruff = "^0.9.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.13"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = false
plugins = []

[tool.ruff]
target-version = "py313"
select = [
    "E",  # Pycodestyle (formatting errors)
    "F",  # Pyflakes (undefined variables, unused imports)
    "W",  # Warnings
    "I",  # isort (import sorting)
    "UP", # pyupgrade (modern Python syntax)
    "B",
]
ignore = []
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]

ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.mccabe]
max-complexity = 10


[tool.pytest.ini_options]
pythonpath = ["src"]
